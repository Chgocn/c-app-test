apply plugin: 'com.android.application'

def isTravis = "true".equals(System.getenv("TRAVIS"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    def verCode = getVersionCode()
    defaultConfig {
        applicationId "io.chgocn.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode verCode
        versionName "0.0.1"
        // Enabling multidex support.
        multiDexEnabled true
    }

    // sign the application
    // see {http://stackoverflow.com/questions/18328730/how-to-create-a-release-signed-apk-file-using-gradle}
    signingConfigs {
        release {
            storeFile file("../c.jks")
            storePassword "T1nN0ycO"
            keyAlias "release.key"
            keyPassword "T1nN0ycO"
        }
        debug {
            storeFile file("../c.jks")
            storePassword "T1nN0ycO"
            keyAlias "release.key"
            keyPassword "T1nN0ycO"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
        warning 'MissingTranslation'
        abortOnError true
        check 'NewApi', 'InlinedApi'
        fatal 'NewApi', 'InlinedApi'
        checkReleaseBuilds true

        textReport isTravis
        textOutput 'stdout'

        htmlReport !isTravis
        xmlReport !isTravis
    }

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isTravis
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    //compile 'com.android.support:appcompat-v7:23.4.0'

    //检查界面卡顿元凶
    debugCompile 'com.github.moduth:blockcanary-android:1.2.1'
    releaseCompile 'com.github.moduth:blockcanary-no-op:1.2.1'
    //检查内存泄漏
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'

    //检查数据库
    compile 'com.facebook.stetho:stetho:1.3.1'
    compile 'com.facebook.stetho:stetho-okhttp3:1.3.1'

    compile project(':Lib')
    compile project(':Umeng')
}

assembleRelease {}.doLast {
    updateVersionCode()
}

def getVersionCode() {
    def versionFile = file('version.properties')

    if (versionFile.exists()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['build.number'].toInteger()
        println('Current version code is ' + versionCode.toString())
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

def updateVersionCode() {
    def runTasks = gradle.startParameter.taskNames

    if (!('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks)) {
        return
    }

    def File versionFile = file('version.properties')

    if (versionFile.exists()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def currentVersionCode = versionProps['build.number'].toInteger()
        currentVersionCode++
        versionProps['build.number'] = currentVersionCode.toString()
        versionProps.store(versionFile.newWriter(), null)
        println('Updated version code to ' + currentVersionCode.toString())
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}
